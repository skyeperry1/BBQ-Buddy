
#include "Nextion.h"
#include <PID_v1.h>

/*******************************
Pin Connections
*******************************/
#define PIT_PROBE_PIN A1 //Pit Probe 1
#define MEAT_PROBE1_PIN A7 //Meat Probe 1
#define MEAT_PROBE2_PIN A6 //Meat Probe 2
#define ALARM_PIN 12 //Piezio Alarm PWM pin
#define BLOWER_PIN A3 //Blower PWM pin
//#define nextion tx pin 2
//#define nextion rx pin 3
/*******************************
Global Variables
*******************************/
int fan_speed;
bool timer_alarm = false; //start the program with the alarms off to aviod annoyances
int set_timer_minutes = 0;
int  set_timer_hours = 0;
float pit_temp, 
      meat1_temp,
      meat2_temp,
      previous_temp, 
      previous_setpoint;
double Setpoint = 225;
double Input, 
       Output; 

bool lid_is_open;
int lid_open_buffer = 4;
float end_lid_open_event_buffer = -.2;


//PID RUN RANGE TUNINGS
int PID_run_range = 15; // Temperature range around setpoint +/- where we run the conservative PID tunings
int PID_agg_run_range = 25; // Temperature range around setpoint+/- where we run the aggresive PID tunings
//PID TUNING
double Kp = 2.5;
double Ki = .0035;
double Kd = 6;
int SampleTime = 500; //.5 Second Sample Time

//Agressive PID Tuning
double agg_Kp = 4;
double agg_Ki = .02;
double agg_Kd = 6;

//Specify the links and initial tuning parameters
PID fanPID(&Input, &Output, &Setpoint, Kp, Ki, Kd, DIRECT);

/*******************************
Display Screens
*******************************/
NexPage bootscreen = NexPage(0, 0, "page0");
NexPage SetTempPage = NexPage(1, 0, "page1");
NexPage dashboard = NexPage(2, 0, "page2");

/*******************************
Display Numbers
*******************************/
NexNumber dashboard_temp = NexNumber(2, 2, "n0"); //dash setpoint number display
NexNumber dashboard_fan = NexNumber(2, 5, "n2"); //dashboard fanspeed number display
NexNumber dashboard_pit_temp = NexNumber(2, 4, "n1"); //dash pit temp number display
NexNumber dashboard_probe1_temp = NexNumber(2, 10, "n5"); //dash p1 number display
NexNumber dashboard_probe2_temp = NexNumber(2, 11, "n6"); //dash p2 number display
NexNumber dashboard_timer_hours = NexNumber(2, 7, "n3"); //dash timer hours number display
NexNumber dashboard_timer_minutes = NexNumber(2, 9, "n4"); //dash timer mins number display
NexNumber SetTempPage_temp = NexNumber(1, 5, "n0"); //setTemp setpoint number display

NexNumber timerdisplay_timer_hours = NexNumber(3, 7, "timerH"); // Timer hours
NexNumber timerdisplay_timer_minutes = NexNumber(3, 9, "timerM"); // Timer minutes

/*******************************
Display Pictures
*******************************/
NexPicture lid_indicator = NexPicture(2, 6, "p1");

/*******************************
Progress Bars
*******************************/
NexProgressBar j0  = NexProgressBar(0, 3, "j0");

/*******************************
Set Temp Screen
*******************************/
void settemp_plusPopCallback(void *ptr);
void settemp_minusPopCallback(void *ptr);
void settemp_setPopCallback(void *ptr);
/*******************************
Button Definitions
*******************************/
NexButton settemp_plus = NexButton(1, 2, "b0"); //plus btn
NexButton settemp_minus = NexButton(1, 3, "b1"); //minus btn
NexButton settemp_set = NexButton(1, 4, "b2"); //set btn
NexHotspot dash_setTemp    = NexHotspot(2, 3, "m0");
//Timer page Buttons
NexHotspot silence_alarm    = NexHotspot(3, 3, "m1");
NexButton timer_plus = NexButton(3, 4, "b0"); //timer plus btn
NexButton timer_minus = NexButton(3, 5, "b1"); //timer minus btn
NexButton timer_set = NexButton(3, 6, "b2"); //timer set btn
/*******************************
Button Callbacks
*******************************/
//Set temp screen callbacks
  //plus btn
  void settemp_plusPopCallback(void *ptr){   
      beepOnce();
      Setpoint += 5;        
      SetTempPage_temp.setValue(int(Setpoint));
  }
  //minus btn
  void settemp_minusPopCallback(void *ptr){      
      beepOnce();
      Setpoint -= 5;        
      SetTempPage_temp.setValue(int(Setpoint));
  }
  //set btn
  void settemp_setPopCallback(void *ptr){ 
        beepOnce();  
        dashboard.show();
        updateDashboard(false);
  }

//Dashboard Screen Callbacks
  //Set Temp 
  void dash_setTempPopCallback(void *ptr){   
       beepOnce();
       SetTempPage.show();
       SetTempPage_temp.setValue(int(Setpoint));
  }
//Timer Screen Callbacks
    void silence_alarmPopCallback(void *ptr){ 
        beepOnce();  
        StopTimer();
        timer_alarm = false;     
  }
    void timer_plusPopCallback(void *ptr){ 
        beepOnce();  
       set_timer_minutes += 5;
       if(set_timer_minutes >= 60){
        set_timer_minutes = 0;
        set_timer_hours +=1;
        }

        timerdisplay_timer_hours.setValue(set_timer_hours);
        timerdisplay_timer_minutes.setValue(set_timer_minutes);
       
  }
    void timer_minusPopCallback(void *ptr){ 
        beepOnce();  
        set_timer_minutes -= 5;
        if(set_timer_minutes < 0){        
          if(set_timer_hours >= 1){ //Check to make sure we dont set the timer for negative hours
          set_timer_hours -=1;
          set_timer_minutes = 55;
          } else {
            set_timer_minutes = 0;            
          }
          
        }
       timerdisplay_timer_hours.setValue(set_timer_hours);
       timerdisplay_timer_minutes.setValue(set_timer_minutes);
  }
    void timer_setPopCallback(void *ptr){ 
        beepOnce();  
        dashboard.show();
        updateDashboard(false);
        SetTimer(set_timer_hours,set_timer_minutes,0);
        StartTimer();
        set_timer_hours = 0; //reset our set timer variables
        set_timer_minutes = 0; //reset our set timer variables
  }
  
/*******************************
Event Listiner List
*******************************/
NexTouch *nex_listen_list[] = 
{   &settemp_plus,
    &settemp_minus, 
    &settemp_set,  
    &SetTempPage_temp,
    &dash_setTemp,
    &silence_alarm,
    &timer_set,
    &timer_plus,
    &timer_minus,
    NULL
};

/*******************************
Functions
*******************************/

//runProgressBar(NexProgressBar,int)
//takes progress bar and runtime in miliseconds as areguments
//returns false when progress bar animaiton is complete
bool runProgressBar(NexProgressBar prog_bar, int run_time){
  int progress = 0;
  run_time = run_time/100; 
  
  for(progress; progress < 50;progress++) {  //Go to 50% progress
    prog_bar.setValue(progress);
    delay(run_time);
  }
  
   initializePins(); //Initialize Pins Then load the rest of the progress bar
    
   
   for(progress; progress < 100;progress++) {  
    prog_bar.setValue(progress);
    delay(run_time);
  }
  beepTwice();
  return false;
}

//updateDashboard()
//Updates Dashboard Variables
void updateDashboard(bool change_lid_indicator){
  dashboard_temp.setValue(int(Setpoint));
  dashboard_fan.setValue(int(fan_speed));
  
  updateDashTemps();
  
  if(change_lid_indicator)
  lid_indicator.setPic(12); 
  else
  lid_indicator.setPic(11);

  UpdateDashTimer(); //Runs the Timer
 }
void updateDashTemps(){
  if(pit_temp > 500 || pit_temp < 40)
  dashboard_pit_temp.setValue(NULL);
  else
  dashboard_pit_temp.setValue(int(pit_temp));
  
  if(meat1_temp > 500 || meat1_temp < 40)
  dashboard_probe1_temp.setValue(NULL);
  else
  dashboard_probe1_temp.setValue(int(meat1_temp));

  if(meat2_temp > 500 || meat2_temp < 40)
  dashboard_probe2_temp.setValue(NULL);
  else
  dashboard_probe2_temp.setValue(int(meat2_temp));
  }
//Checks if the timer is done and rings the alarm. 
//Also takes care of wierd display when no timer is set
void UpdateDashTimer(){
  //Timer and alarm stuff
  CountDownTimer();
  if(isTimerDone()){    
    ringTheAlarm();
  }
  
  if(timer_alarm){ //Only show the timer if it's set to prevent funky shit from going on up in there
  dashboard_timer_hours.setValue(ShowHours());
  dashboard_timer_minutes.setValue(ShowMinutes());
  } else { //If its not set we set it to null... We should probably figure out a way to better indicate this on the dashboard screen, perhaps a dark clock icon?
  dashboard_timer_hours.setValue(NULL);
  dashboard_timer_minutes.setValue(NULL);
  }

}

//initializePins()
//This just goes through all the Global pins and initializes them in a nice clean function
void initializePins(){
  pinMode(ALARM_PIN, OUTPUT); //Piezio Alarm
  pinMode(PIT_PROBE_PIN, INPUT);  //Mavereric Pit Probe in
  pinMode(MEAT_PROBE1_PIN, INPUT); //Maverick meat probe 1
  pinMode(MEAT_PROBE2_PIN, INPUT); //Maverick meat probe 2
  pinMode(BLOWER_PIN, OUTPUT); //Set up the 5V DC blower for PWM output
  
}

//GetProbeTempF()
//Takes a pin as an argument, right now this function only works for maverick ET-73 Probes
//Must have a 22k Ohm Reistor in circut
//Takes 8 samples every 80ms, currently using the first sample, maybe we should discard?
//Returns the convertes temp in F using the steinhart-hart equation
float GetProbeTempF(int pin) {
  double R, T;
   uint8_t i;
  float average;
  const int NUMSAMPLES = 8;  
  int samples[NUMSAMPLES];
 
  // take N samples in a row, with a slight delay
  for (i=0; i< NUMSAMPLES; i++) {
   samples[i] = analogRead(pin);
   delay(10);
  } 
  // average all the samples out
  average = 0;
  for (i=0; i< NUMSAMPLES; i++) {
     average += samples[i];
  }
  average /= NUMSAMPLES; 
  // These were calculated from the Maveric ET-73 thermister data sheet
  //  A = 2.3067434E-4;
  //  B = 2.3696596E-4;
  //  C = 1.2636414E-7;
  //
  // This is the value of the other half of the voltage divider
  //  Rknown = 22000;
  
  // Do the log once so as not to do it 4 times in the equation
  //  R = log(((1024/(double)aval)-1)*(double)22200);
  R = log((1 / ((1024 / (double) average) - 1)) * (double) 22000);
  //lcd.print("A="); lcd.print(aval); lcd.print(" R="); lcd.print(R);
  // Compute degrees C
  T = (1 / ((2.3067434E-4) + (2.3696596E-4) * R + (1.2636414E-7) * R * R * R)) - 273.25;
  // return degrees F
  return ((float) ((T * 9.0) / 5.0 + 32.0));
}

//isLidOpen()
//Cheks the change in temp since last reading against a pre-defined buffer and returns true if we've dropped more
//degrees than our buffer allows
bool isLidOpen(float derivative, int lid_open_buffer) {
  //Check and see if the lid is open
  if (derivative > lid_open_buffer)
    return true;  
  else  
    return false;
  
}

//BeepOnce()
//Beeps the Piezio buzzer once
void beepOnce(){
  delay(50);
  analogWrite(ALARM_PIN,500);
  delay(50);
  analogWrite(ALARM_PIN,0);
  }
 
//BeepTwice()
//Beeps the Piezio buzzer twice
void beepTwice(){
  analogWrite(ALARM_PIN,500);
  delay(50);
  analogWrite(ALARM_PIN,0);
  delay(50);
  analogWrite(ALARM_PIN,500);
  delay(50);
  analogWrite(ALARM_PIN,0);
  }
void ringTheAlarm(){
beepTwice();
delay(50);
beepTwice();
delay(50);
beepTwice();
  }
  
/*  OLD TIMER STUFF
int getTotalElapsedMinuets(){
   int elapsed_minutes = (millis() / 1000 / 60) % 60;
   return elapsed_minutes;
  }
int getTotalElapsedHours(){
   int elapsed_hours =  millis() / 1000 / 60 / 60;
   return elapsed_hours;
}


void setTimer(){
  timer_start_seconds = millis() /1000;
  timer_start_min = getTotalElapsedMinuets();
  timer_start_hours = getTotalElapsedHours();  
  timer_alarm = true;  
  }
  
void countDownTimer(){
  //timer_display_seconds = timer_seconds - ( millis()/1000 - timer_start_seconds);
  timer_display_minutes = timer_minutes - ( (millis() / 1000 / 60) % 60 - timer_start_min );
  timer_display_hours = timer_hours - ( millis() / 1000 / 60 / 60 - timer_start_hours);  
  }
  
bool isTimerDone(){
  if( timer_alarm == true && timer_display_hours <= 0 && timer_display_minutes <= 0)
  return true;
  else
  return false;
  }
*/

/****************************
 * New Timer Functions
 ****************************/
unsigned long Watch, _micro, time = micros();
unsigned int Clock = 0, R_clock;
boolean Reset = false, Stop = false, Paused = false;
volatile boolean timeFlag = false;

boolean CountDownTimer()
{
  static unsigned long duration = 1000000; // 1 second
  timeFlag = false;

  if (!Stop && !Paused) // if not Stopped or Paused, run timer
  {
    // check the time difference and see if 1 second has elapsed
    if ((_micro = micros()) - time > duration ) 
    {
      Clock--;
      timeFlag = true;

      if (Clock == 0) // check to see if the clock is 0
        Stop = true; // If so, stop the timer

     // check to see if micros() has rolled over, if not,
     // then increment "time" by duration
      _micro < time ? time = _micro : time += duration; 
    }
  }
  return !Stop; // return the state of the timer
}

void ResetTimer()
{
  SetTimer(R_clock);
  Stop = false;
}

void StartTimer()
{
  Watch = micros(); // get the initial microseconds at the start of the timer
  Stop = false;
  Paused = false;
  timer_alarm = true;  
}

void StopTimer()
{
  Stop = true;
  timer_alarm = false; 
}

void StopTimerAt(unsigned int hours, unsigned int minutes, unsigned int seconds)
{
  if (TimeCheck(hours, minutes, seconds) )
    Stop = true;
}

void PauseTimer()
{
  Paused = true;
}

void ResumeTimer() // You can resume the timer if you ever stop it.
{
  Paused = false;
}

void SetTimer(unsigned int hours, unsigned int minutes, unsigned int seconds)
{
  // This handles invalid time overflow ie 1(H), 0(M), 120(S) -> 1, 2, 0
  unsigned int _S = (seconds / 60), _M = (minutes / 60);
  if(_S) minutes += _S;
  if(_M) hours += _M;

  Clock = (hours * 3600) + (minutes * 60) + (seconds % 60);
  R_clock = Clock;
  Stop = false;
}


void SetTimer(unsigned int seconds)
{
 // StartTimer(seconds / 3600, (seconds / 3600) / 60, seconds % 60);
 Clock = seconds;
 R_clock = Clock;
 Stop = false;
}

int ShowHours()
{
  return Clock / 3600;
}

int ShowMinutes()
{
  return (Clock / 60) % 60;
}

int ShowSeconds()
{
  return Clock % 60;
}

bool isTimerDone(){
  if( timer_alarm == true && TimeCheck(0,0,0))
  return true;
  else
  return false;
  }
  
unsigned long ShowMilliSeconds()
{
  return (_micro - Watch)/ 1000.0;
}

unsigned long ShowMicroSeconds()
{
  return _micro - Watch;
}

boolean TimeHasChanged()
{
  return timeFlag;
}

// output true if timer equals requested time
boolean TimeCheck(unsigned int hours, unsigned int minutes, unsigned int seconds) 
{
  return (hours == ShowHours() && minutes == ShowMinutes() && seconds == ShowSeconds());
}




/*******************************
/*******************************
Setup
*******************************
*******************************/
void setup(void)
{
 //DEBUGGING STUFF HERE DELETE AT SOME POINT
  
  
  //SetTimer(0, 0,30);
  //StartTimer();
 
 //END DEBUGGIN' CODE
 nexInit();
 settemp_plus.attachPop(settemp_plusPopCallback);
 settemp_minus.attachPop(settemp_minusPopCallback);
 settemp_set.attachPop(settemp_setPopCallback);
 dash_setTemp.attachPop(dash_setTempPopCallback);
 silence_alarm.attachPop(silence_alarmPopCallback);
 timer_plus.attachPop(timer_plusPopCallback);
 timer_minus.attachPop(timer_minusPopCallback);
 timer_set.attachPop(timer_setPopCallback);

 //Run Boot Screen 
 bool booting = true;
  while(booting){
    booting = runProgressBar(j0, 8000);
    }   
  // After boot screen runs, go to settemp page
  SetTempPage.show(); 
  SetTempPage_temp.setValue(int(Setpoint)); //Pass BBQ setpoint variable to screen to start @225
  
  //PID Initialization
  //initialize the variables we're linked to
  Input = GetProbeTempF(PIT_PROBE_PIN);
  //turn the PID on
  fanPID.SetSampleTime(SampleTime);
  fanPID.SetMode(AUTOMATIC);
}

/*******************************
/*******************************
Loop
*******************************
*******************************/
void loop(void)
{   

    pit_temp = GetProbeTempF(PIT_PROBE_PIN); //Read the pit probe
    meat1_temp = GetProbeTempF(MEAT_PROBE1_PIN); //read meat probe1
    meat2_temp = GetProbeTempF(MEAT_PROBE2_PIN); //read meat probe2
    fan_speed = (Output / 255) * 100; //calculate the fan speed for display on a 0 -100% scale
    
    int degrees_from_setpoint = Setpoint - pit_temp;  //how far are we from our setpoint?    
    float derivative = previous_temp - pit_temp;  //How much has the pit temp changed since last reading
    int setpoint_change = previous_setpoint - Setpoint; //How much has the setpoint changed since last reading
    
    nexLoop(nex_listen_list); //event listener   
    
    //Check to see if lid is open
    //Run until we start to gain temp
    if (isLidOpen(derivative, lid_open_buffer)) {
     beepTwice();
      
        while (derivative > end_lid_open_event_buffer) {
      //Turn off the PID while the LID is OPEN
      fanPID.SetMode(MANUAL); 
           
      //Re-read a few variables within this loop
      pit_temp = GetProbeTempF(PIT_PROBE_PIN);
      derivative = previous_temp - pit_temp;   
            
      //Update our power output to 0
      analogWrite(BLOWER_PIN, 0);
      //save temperature for next loop iteration
      previous_temp = pit_temp;
      updateDashboard(true); // change the dash image to lid open with true
      delay(500);
      }
    }
//PID RUN SETTINGS
    if(degrees_from_setpoint > PID_agg_run_range){ //If we're under temp, we just turn on the fan  and the PID off
      fanPID.SetMode(MANUAL);
      analogWrite(BLOWER_PIN, 255);
      fan_speed = 100;
            
    } else if(degrees_from_setpoint < -PID_agg_run_range){ //If we're  over temp, we just turn  the fan off and the PID off
      fanPID.SetMode(MANUAL);
      analogWrite(BLOWER_PIN,  0);
      fan_speed = 0;
      
    } else if(degrees_from_setpoint < PID_agg_run_range && degrees_from_setpoint > PID_run_range || degrees_from_setpoint > -PID_agg_run_range && degrees_from_setpoint < -PID_run_range){ //Run the agressive temp PID tuning
    fanPID.SetTunings(agg_Kp, agg_Ki,agg_Kd);
    fanPID.SetMode(AUTOMATIC);    
    Input = pit_temp;
    fanPID.Compute();
    //Send the computed output power to analog 3
    analogWrite(BLOWER_PIN, Output == 0 ? Output :(Output/2 + 127.5)); //if output is equal to zero, then write 0, otherwise use 127.5-255 output for powering the blower to prevent buzzing/noise
    fan_speed = (Output / 255) * 100;

    }else {      
    //Run standard conservitive PID tunings
    fanPID.SetTunings(Kp, Ki,Kd);
    fanPID.SetMode(AUTOMATIC);    
    Input = pit_temp;
    fanPID.Compute();
    //Send the computed output power to analog 3
    analogWrite(BLOWER_PIN, Output == 0 ? Output :(Output/2 + 127.5)); //if output is equal to zero, then write 0, otherwise use 127.5-255 output for powering the blower to prevent buzzing/noise
    fan_speed = (Output / 255) * 100;
    }
     
    //ENDING LOOP STUFF
    //Save the previous readings to check next loop iteration
    previous_temp = pit_temp;
    previous_setpoint = Setpoint; 
    
    updateDashboard(false);

    //delay(200); //less delay seems to help with the touch event listener
}
