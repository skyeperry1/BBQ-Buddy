#include <PID_v1.h>
//#include <PID_AutoTune_v0.h> // Not implemented autotune
#include<math.h>
#include <SPI.h>
#include <Wire.h>
#include <max6675.h> //Thermocouple Library
#include <Adafruit_GFX.h> // OLED Library
#include <Adafruit_SSD1306.h> // OLED Library

#define OLED_RESET 4  // OLED Library
Adafruit_SSD1306 display(OLED_RESET);
//Define Thermometer Icon Matrix
const unsigned char thermometer_icon [] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x08, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x08, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x08, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x08, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x09, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x90, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x09, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x90, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x09, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x90, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x09, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x90, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x19, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0xe4, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x2f, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0xe4, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 
};
const unsigned char meat_icon [] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 
0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x01, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xff, 0x00, 0x00, 0xf0, 
0x00, 0x01, 0xff, 0xf0, 0x00, 0x0f, 0xfc, 0x70, 0x00, 0x1f, 0xe0, 0x00, 0x03, 0xff, 0xf0, 0xf0, 
0x00, 0x7c, 0x01, 0xff, 0xff, 0xff, 0x01, 0xf0, 0x01, 0xe0, 0x7f, 0xff, 0xff, 0xf8, 0x1f, 0xf0, 
0x07, 0x87, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xf0, 0x0e, 0x1f, 0xc0, 0x3f, 0xff, 0x87, 0xff, 0xe0, 
0x0e, 0x3f, 0x00, 0x07, 0xfe, 0x1f, 0xff, 0x80, 0x1c, 0x7e, 0x00, 0x07, 0xfc, 0x7f, 0xfc, 0x00, 
0x1c, 0x7e, 0x00, 0x07, 0xf8, 0xff, 0xc0, 0x00, 0x1c, 0x3f, 0x80, 0x1f, 0xe1, 0xfe, 0x00, 0x00, 
0x1e, 0x1f, 0xff, 0xff, 0xc3, 0xf8, 0x00, 0x00, 0x1f, 0x0f, 0xff, 0xff, 0x0f, 0xf0, 0x00, 0x00, 
0x1f, 0xc1, 0xff, 0xf8, 0x3f, 0xe0, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 
0x07, 0xff, 0x80, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 
0x01, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
0x00, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const unsigned char elapsed_time_icon[] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xe0, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x81, 0xc6, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x03, 0x31, 0xf3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x21, 0xf9, 0x80, 0x00, 0x00, 
0x00, 0x00, 0x0c, 0x01, 0xfc, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x81, 0xfe, 0xc0, 0x00, 0x00, 
0x00, 0x00, 0x09, 0x01, 0xfe, 0x40, 0x00, 0x00, 0x00, 0x00, 0x18, 0x01, 0xff, 0x60, 0x00, 0x00, 
0x00, 0x00, 0x18, 0x01, 0xff, 0x60, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x01, 0xff, 0x20, 0x00, 0x00, 
0x00, 0x00, 0x1a, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x60, 0x00, 0x00, 
0x00, 0x00, 0x18, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x02, 0x40, 0x00, 0x00, 
0x00, 0x00, 0x0d, 0x80, 0x06, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0xc0, 0x00, 0x00, 
0x00, 0x00, 0x06, 0x20, 0x11, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0x30, 0x33, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0x83, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x0c, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 
};
const unsigned char alarm_icon[] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x70, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x7c, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x03, 0xe0, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x9f, 0xcf, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x06, 0x70, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xc0, 0x19, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x06, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0c, 0x02, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x80, 0x00, 0x00, 
0x00, 0x00, 0x08, 0x02, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x09, 0xfe, 0x00, 0x80, 0x00, 0x00, 
0x00, 0x00, 0x08, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x80, 0x00, 0x00, 
0x00, 0x00, 0x0c, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x06, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x18, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x70, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 
};
// Initialize MAX6675 thermocouple module and define pins
int thermoDO = 49;
int thermoCS = 51;
int thermoCLK = 53;
MAX6675 thermocouple(thermoCLK, thermoCS, thermoDO);
int vccPin = 47;
int gndPin = 45;

//Initilize Meat Probe variables
// which analog pin to connect
#define THERMISTORPIN A1 
 


//Button Pins;
const int  buttonPin = 22;
int buttonState = 0;         // current state of the button
int lastButtonState = 0;     // previous state of the button

//Speaker Pin
const int speakerpin = 12;
// pot variable
const int potpin = 0;
int smoothed_pot_val;

//Menu display counter
int menu_counter = 1;

//Define PID Variables we'll be connecting to
int fan_speed;
float smoker_temp, previous_temp, previous_setpoint;
double Setpoint, Input, Output;
//GENERAL SETTINGS
int lid_open_buffer = 4;
float end_lid_open_event_buffer = -.2;
int number_of_menus = 4;

//PID RUN RANGE TUNINGs
int PID_run_range = 15; // Temperature range around setpoint +/- where we run the conservative PID tunings
int PID_agg_run_range = 25; // Temperature range around setpoint+/- where we run the aggresive PID tunings
//PID TUNING
double Kp = 2.5;
double Ki = .0035;
double Kd = 6;
int SampleTime = 500; //.5 Second Sample Time

//Agressive PID Tuning
double agg_Kp = 4;
double agg_Ki = .02;
double agg_Kd = 6;

//Specify the links and initial tuning parameters
PID fanPID(&Input, &Output, &Setpoint, Kp, Ki, Kd, DIRECT);

void setup() {
  Serial.begin(9600);
  // use Arduino pins for display stuff
  pinMode(vccPin, OUTPUT); digitalWrite(vccPin, HIGH);
  pinMode(gndPin, OUTPUT); digitalWrite(gndPin, LOW);
  //Button Setup
  pinMode(buttonPin, INPUT);
  pinMode(speakerpin, OUTPUT);
  //Mavereric Meat Probe in
   pinMode(THERMISTORPIN, INPUT);
  
  // by default, we'll generate the high voltage from the 3.3v line internally
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); // initialize with the I2C addr 0x3D (for the 128x64)
  // init done
  // To change the splashscreen, upload a BMP that's 128 x 32 and export as 16 bit matrix
  // to LEDhelper and load the code into the Adafruit_SSD1306 library
  // Since the buffer is intialized with an Adafruit splashscreen
  // internally, this will display the splashscreen.
  display.display();  
  delay(5000);   // Splashscreen delay (>1000)while we wait for the Themocouple module chip to stabilize
  display.clearDisplay();// Clear the display.

  buttonState = digitalRead(buttonPin);
  while (buttonState == lastButtonState) {
    lastButtonState = buttonState;
    initializeDisplay();
    display.drawBitmap(0,0,thermometer_icon, 64,32, WHITE);
    display.setTextSize(1);    
    display.setCursor(50, 8);
    
    //Smooth out the pot reading        
    smoothed_pot_val = smooth( analogRead(potpin) ,.75,smoothed_pot_val); //Smooth the pot value, middle arguement is a buffer variable < 1
    Setpoint = smoothed_pot_val/12 + 225; //a quick eqation gives us
    
    display.println("Set Temp:");
    display.setCursor(50, 18);
    display.setTextSize(2); 
    printTemp("", Setpoint );
    display.display();    
    buttonState = digitalRead(buttonPin);
    delay(100);
  }
   beepTwice();
   
  //PID Initialization
  //initialize the variables we're linked to
  Input = thermocouple.readFahrenheit();
  //Setpoint = 200;
  //turn the PID on
  fanPID.SetSampleTime(SampleTime);
  fanPID.SetMode(AUTOMATIC);
}

void loop() {
  //Variables
  bool lid_is_open;
  int count = 0;

  float meat_temp = thermister_temp(1);
  float smoker_temp = thermocouple.readFahrenheit();
  //Get our margin of error since the last reading taken at the end of the void loop
  //TODO: Reverse this eqation and related functions
  //TODO: CREATE LOW CHARCOAL WARNING
  float derivative = previous_temp - smoker_temp;
  int setpoint_change = previous_setpoint - Setpoint;
  //Number of degrees drop that triggers a lid opening event
 
  int range = Setpoint - smoker_temp;

  //Serial.println(smoker_temp); is this here for a reason?
  //LID OPENING EVENT
  //-------------------------------------------- -
  //check and see if the lid is open
  //Run as long as we're loosing temperature
  if (isLidOpen(derivative, lid_open_buffer)) {
    // now we run the lid open sequence until the smoker(derivative) gains .5 degrees as noted below
     beepTwice();
    while (derivative > end_lid_open_event_buffer) {
      //Turn off the PID while the LID is OPEN
      fanPID.SetMode(MANUAL);      
      //Re-read a few variables within this loop
      smoker_temp = thermocouple.readFahrenheit();
      derivative = previous_temp - smoker_temp;
      //OPEN LID DISPLAY OUTPUT
      initializeDisplay();
      //Flash Lid Open Warning
      count++;
      if (count == 100)  count = 0; //reset the count at 100
      (count % 2 == 0 ? display.print("LID OPEN!") : display.print("         "));
      display.print("   ");
      printTime();
      display.println("");
      printTemp("Setpoint: ", Setpoint );
      printTemp("Smoker Temp: ", smoker_temp );
      printTemp("Meat Temp: ", meat_temp );
      display.display();
      //Update our power output to 0
      analogWrite(3, 0);
      //save temperature for next loop iteration
      previous_temp = smoker_temp;
      delay(500);
    }
  } else {
    //Normal Operation
    buttonState = digitalRead(buttonPin);
          //Check the button to switch menus
          if(buttonState != lastButtonState){
          if(buttonState == HIGH){
            menu_counter++;  
            beepOnce();  
          }
           if(menu_counter > number_of_menus) menu_counter = 1;          
          }
      
          if(menu_counter == 1){
          //DASBOARD DISPLAY OUTPUT
          initializeDisplay(); 
          printFanSpeed(fan_speed); 
          display.print("   ");
          display.print("Time:");
          printTime();
          display.println("");
          printTemp("Setpoint: ", Setpoint );
          printTemp("Smoker Temp: ", smoker_temp );
          //printTemp("Prev Temp: ",previous_temp );
          printTemp("Meat Temp: ", meat_temp );
          display.display();
          } 
          if(menu_counter == 2){
          //PID DISPLAY OUTPUT
          initializeDisplay(); 
          printFanSpeed(fan_speed); 
          display.print("   ");
          display.print("Time:");
          printTime();
          display.println("");
          display.print("Kp = ");
          display.println(fanPID.GetKp());
          display.print("Ki = ");
          display.println(fanPID.GetKi());
          display.print("Kd = ");
          display.println(fanPID.GetKd());    
          display.display();  
          }
          if(menu_counter == 3){
          //TIME DISPLAY OUTPUT
          initializeDisplay(); 
          printFanSpeed(fan_speed); 
          display.print("   ");
          display.print("Time:");  
          printTime();    
          display.println("");
          display.drawBitmap(0,0,meat_icon, 64,32, WHITE);
          display.setCursor(66, 8);          
          display.println("Meat Temp:");
          display.setCursor(66, 18);
          display.setTextSize(2); 
          printTemp("", meat_temp );
          display.display();  
          }
          if(menu_counter == 4){
          //TIME DISPLAY OUTPUT
          initializeDisplay(); 
          printFanSpeed(fan_speed);                   
          display.println("");
          display.drawBitmap(0,0,elapsed_time_icon, 64,32, WHITE);
          display.setCursor(66, 8);          
          display.println("Time:");
          display.setCursor(66, 18);
          display.setTextSize(2);          
          printTime();
          display.display();  
          }
         
    
    if(range > PID_agg_run_range){ //If we're under temp, we just turn on the fan  and the PID off
      fanPID.SetMode(MANUAL);
      analogWrite(3, 255);
      fan_speed = 100;
            
    } else if(range < -PID_agg_run_range){ //If we're  over temp, we just turn  the fan off and the PID off
      fanPID.SetMode(MANUAL);
      analogWrite(3,  0);
      fan_speed = 0;
      
    } else if(range < PID_agg_run_range && range > PID_run_range || range > -PID_agg_run_range && range < -PID_run_range){ //Run the agressive temp PID tuning
    fanPID.SetTunings(agg_Kp, agg_Ki,agg_Kd);
    fanPID.SetMode(AUTOMATIC);    
    Input = thermocouple.readFahrenheit();
    fanPID.Compute();
    //Send the computed output power to analog 3
    analogWrite(3, Output == 0 ? Output :(Output/2 + 127.5));
    fan_speed = (Output / 255) * 100;

    }else {      
    //Run standard conservitive PID tunings
    fanPID.SetTunings(Kp, Ki,Kd);
    fanPID.SetMode(AUTOMATIC);    
    Input = thermocouple.readFahrenheit();
    fanPID.Compute();
    //Send the computed output power to analog 3
    analogWrite(3, Output == 0 ? Output :(Output/2 + 127.5));
    fan_speed = (Output / 255) * 100;
    }
    
    //ENDING LOOP STUFF
    //Save the previous readings to check next loop iteration
    previous_temp = smoker_temp;
    previous_setpoint = Setpoint;
    lastButtonState = buttonState;    
  }
  delay(200);
  
}

/*--------------------------------------------
 * FunCTIONS
 */
//intitialize display
//Clear the display, set the cursor and font size
void initializeDisplay() {
  display.clearDisplay();
  display.setTextSize(0);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
}
//Print Time
void printTime() {
  int elapsed_seconds = millis() / 1000; //Get the elapsed time in seconds
  int elapsed_minutes = elapsed_seconds / 60;
  int elapsed_hours =  elapsed_minutes / 60;
  //calculations for
  int disp_sec = elapsed_seconds - (elapsed_minutes * 60);
  int disp_min = elapsed_minutes - (elapsed_hours * 60);
  int disp_hours = elapsed_hours;

  //display.print("Time:");
  //Print Hours with leading zero's to display
  display.print(disp_hours);
  display.print(":");
  //Print Minutes with leading zero's to display
  forceTwoDigitInt(disp_min, false);
  //Print Seconds with leading zero's to display
  //forceTwoDigitInt(disp_sec, false);
}

//This function fills in missing leading zero's in the time
void forceTwoDigitInt(int display_time, bool print_colon) {
  if (display_time <= 0) {
    display.print("00");
  } else if (display_time > 0 && display_time < 10) {
    display.print("0");
    display.print(display_time);
  }  else {
    display.print(display_time);
  }
  if (print_colon == true) {
    display.print(":");
  }
}

//Prints the temperature to the screen
void printTemp( String tempname, float tempreading) {
  display.print(tempname);
  display.print(tempreading);
  display.print((char)247);
  display.println("F");
}

//Prints the Fan Speed
void printFanSpeed(int fan_speed) {
  display.print("Fan:");
  if (fan_speed < 100) {
    display.print(" ");
  }
  else if (fan_speed < 10) {
    display.print("  ");
  }
  display.print(fan_speed);
  display.print("%");
}

bool isLidOpen(float derivative, int lid_open_buffer) {
  //Check and see if the lid is open
  if (derivative > lid_open_buffer) {
    return true;
  }
  else
  {
    return false;
  }
}

int smooth(int data, float filterVal, float smoothedVal){
  if (filterVal > 1){      // check to make sure param's are within range
    filterVal = .99;
  }
  else if (filterVal <= 0){
    filterVal = 0;
  }
  smoothedVal = (data * (1 - filterVal)) + (smoothedVal  *  filterVal);

  return (int)smoothedVal;
}

void beepOnce(){
  delay(50);
  analogWrite(speakerpin,500);
  delay(50);
  analogWrite(speakerpin,0);
  }
void beepTwice(){
  analogWrite(speakerpin,500);
  delay(50);
  analogWrite(speakerpin,0);
  delay(50);
  analogWrite(speakerpin,500);
  delay(50);
  analogWrite(speakerpin,0);
  }

float thermister_temp(int pin) {
  double R, T;
   uint8_t i;
  float average;
  const int NUMSAMPLES = 8;  //Take 8 Samples? anymore seems to conflict with the MAX module.
  int samples[NUMSAMPLES];
 
  // take N samples in a row, with a slight delay
  for (i=0; i< NUMSAMPLES; i++) {
   samples[i] = analogRead(pin);
   delay(10);
  } 
  // average all the samples out
  average = 0;
  for (i=0; i< NUMSAMPLES; i++) {
     average += samples[i];
  }
  average /= NUMSAMPLES; 
  // These were calculated from the thermister data sheet
  //  A = 2.3067434E-4;
  //  B = 2.3696596E-4;
  //  C = 1.2636414E-7;
  //
  // This is the value of the other half of the voltage divider
  //  Rknown = 22000;

  // Do the log once so as not to do it 4 times in the equation
  //  R = log(((1024/(double)aval)-1)*(double)22200);
  R = log((1 / ((1024 / (double) average) - 1)) * (double) 22000);
  //lcd.print("A="); lcd.print(aval); lcd.print(" R="); lcd.print(R);
  // Compute degrees C
  T = (1 / ((2.3067434E-4) + (2.3696596E-4) * R + (1.2636414E-7) * R * R * R)) - 273.25;
  // return degrees F
  return ((float) ((T * 9.0) / 5.0 + 32.0));
}

void CelsiusToFarenheit(float const tCel, float &tFar) {
  tFar = tCel * 1.8 + 32;
}


